import java.io.*;
import java.util.*;
import org.junit.*;
import org.junit.runner.*;

public class Solution {

  @Test
  public void testReverse() {
    Assert.assertTrue(reverse("Hello").equals("olleH"));
  }

  @Test
  public void testReverseNull() {
    Assert.assertTrue(reverse(null).equals(""));
  }

  @Test
  public void testReverseFail() {
    Assert.assertTrue(reverse("prashant_mhatre").equals("abc"));
  }
  
  public static String reverse(String inputArray) {
    if (inputArray == null) {
      return "";
    }
    char[] array = inputArray.toCharArray();
    final int halfLength = array.length / 2;
    int index2;
    char temp;
    for (int index1 = 0; index1 < halfLength; index1++) {
      index2 = array.length - 1 - index1;
      temp = array[index1];
      array[index1] = array[index2];
      array[index2] = temp;
    }
    return String.valueOf(array);
  }

  public static void main(String args[]) {
    System.out.println("Test reverse: " + reverse("Hello"));    
    JUnitCore.main("Solution");
  }
}


----------------------------------------------
import java.io.*;
import java.util.*;

class Solution {

  public static void main(String[] args) {
    Point p1 = new Point(7, 3, 9);
    Point p2 = new Point(2, 5, 2);
    System.out.println(p1.distance(p2));
    System.out.println(p2.distance(p1));
  }
}

class Point {

  final double x;
  final double y;
  final double z;

  public Point(double x, double y, double z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  double distance(Point p2) {
    double dx = this.x - p2.x;
    double dy = this.y - p2.y;
    double dz = this.z - p2.z;
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
  }
}

